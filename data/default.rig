#--------------------------------------------
# default.rig
#--------------------------------------------
# does NOT currently use buttons 9 or 14
# externally defined constants have comments

BaseRig		 # required initial rig type

#-------------------------------------------------
# Internal Constants (defined by rig design)
#-------------------------------------------------
# NUM_BANKS = 2
# NUM_PATCHES = 24
# - NUM_PATCH_ROWS = 3
# - NUM_PATCH_COLS = 4
# NUM_BANK_PATCHES = NUM_PATCH_ROWS * NUM_PATCH_COLS

define(0, NUM_BANK_PATCHES, 12);	# patches per my _bank
define(1, FIRST_SHORT_NAME, 0);		# first short name STRING_DEF
define(2, FIRST_LONG_NAME, 	24);	# first long name STRING_DEF

# Area numbers

define(4, AREA_SHORT_NAME,  0);		# upper left big patch name
define(5, AREA_LONG_NAME,  	1);		# upper left long patch name
define(6, AREA_MSG,			2);		# upper right big message

#-----------------------------------------------------
# Synth Constants (SampleTank as I have it on iPad)
#-----------------------------------------------------
# The MULTI_OFFSET is vestigial since, at some point, I didn't want to
# re-organize SampleTank's Multi-Patches, I just created a whole new
# set starting at 16 (which is one based, or #17 in Sample Tank).
#
# Futhermore, in that scheme, the patch buttons are thought to
# be colums that start at 0 on the 3rd row.  So patch 0 is
# button 10, patch 1 is button 5, patch 3 is button 0, then
# in the second column, patch 4 is button 11, and so on.
# This is a bit wonky and definitely related to my own personal
# SampleTank setup.

define(8,  MULTI_OFFSET, 16);			# MULTI_OFFSET = 16
define(9,  SYNTH_VOLUME_CHANNEL,  1);	# SYNTH_VOLUME_CHANNEL 	= 1
define(10, SYNTH_VOLUME_CC, 	  7);   # SYNTH_VOLUME_CC      	= 7
define(11, SYNTH_PROGRAM_CHANNEL, 7);	# SYNTH_PROGRAM_CHANNEL = 7


#------------------------------------------------------------
# Guitar Effect Constants (ToneStack as I have it on iPad)
#------------------------------------------------------------

define(13,	GUITAR_VOLUME_CHANNEL,  7 );	# GUITAR_VOLUME_CHANNEL  = 7;
define(14,	GUITAR_VOLUME_CC,       7 );	# GUITAR_VOLUME_CC       = 7;
define(15,	GUITAR_EFFECTS_CHANNEL, 9 );	# GUITAR_EFFECTS_CHANNEL = 9;
define(16,	GUITAR_WAH_CONTROL_CC,  11 );	# GUITAR_WAH_CONTROL_CC  = 11

define(17,	GUITAR_DISTORTION_CC,	26 );	# GUITAR_DISTORTION_CC 	= 26
define(18,	GUITAR_WAH_CC, 			27 );	# GUITAR_WAH_CC 		= 27
define(19,	GUITAR_CHOR_CC, 		29 );	# GUITAR_CHORUS_CC 		= 29
define(20,	GUITAR_ECHO_CC, 		30 );	# GUITAR_ECHO_CC 		= 30


#------------------------------------------------------
# Looper Constants (as defined by my Looper program)
#------------------------------------------------------
# The looper Serial midi sends, and expects only CC messages on Channel 1,
# which is 0 or'd into the first byte of the message.

# TRACK_STATE_EMPTY               = 0  = 0x00;
# TRACK_STATE_RECORDING           = 1  = 0x01;
# TRACK_STATE_PLAYING             = 2  = 0x02;
# TRACK_STATE_STOPPED             = 4  = 0x04;
# TRACK_STATE_PENDING_RECORD      = 8  = 0x08;
# TRACK_STATE_PENDING_PLAY        = 16 = 0x10;
# TRACK_STATE_PENDING_STOP        = 32 = 0x20;
# TRACK_STATE_PENDING			  = 56 = 0x38  TRACK_STATE_PENDING_RECORD | TRACK_STATE_PENDING_PLAY | TRACK_STATE_PENDING_STOP;
#
# LOOP_COMMAND_NONE               = 0  = 0x00;
define(22, LOOP_COMMAND_CLEAR_ALL,	1);				# LOOP_COMMAND_CLEAR_ALL          = 1  = 0x01;
# LOOP_COMMAND_STOP_IMMEDIATE     = 2  = 0x02;      # stop the looper immediately
# LOOP_COMMAND_STOP               = 3  = 0x03       # stop at next cycle point
define(23, LOOP_COMMAND_DUB, 		4);				# LOOP_COMMAND_DUB_MODE           = 4  = 0x04;     	# the dub mode is handled by rPi and modeled here
# LOOP_COMMAND_ABORT_RECORDING    = 6  = 0x06;      # NOT_USED YET - abort the current recording if any
# LOOP_COMMAND_LOOP_IMMEDIATE     = 6  = 0x08;      # NOT_USED YET - immediatly loop back to all clip starts ...
# LOOP_COMMAND_SET_LOOP_START     = 6  = 0x09;      # NOT_USED YET - immediatly set the "restart point" for the clips in the track
# LOOP_COMMAND_CLEAR_LOOP_START   = 6  = 0x0A;      # NOT_USED YET - immediatly set the "restart point" for the clips in the track
define(24, LOOP_COMMAND_TRACK_BASE,	16);			# LOOP_COMMAND_TRACK_BASE         = 16 = 0x10;     	# the four used "track" buttons are 0x10..0x13 (although the protocol can support upto 8 buttons 0..7)
# LOOP_COMMAND_ERASE_TRACK_BASE   = 32 = 0x20;      # NOT USED YET - erase the given track (stops it if playing)
# LOOP_COMMAND_RECORD             = 128 = 0x80;		# FOR LOOPER INTERNAL USE ONLY
# LOOP_COMMAND_PLAY               = 129 = 0x81;		# FOR LOOPER INTERNAL USE ONLY

define(25,	LOOP_CONTROL_BASE_CC,	101 );		# LOOP_CONTROL_BASE_CC   		  = 101 = 0x65      # te_send     looper_recv        for 0..LOOPER_NUM_CONTROLS the value is the volume control (Looper pedal == 0x67)
define(26,	LOOP_STOP_CMD_STATE_CC,	38 );		# LOOP_STOP_CMD_STATE_CC 		  = 38  = 0x26;		# te_recv     looper_send        the value is 0, LOOP_COMMAND_STOP or STOP_IMMEDIATE
define(27,	LOOP_DUB_STATE_CC,		37 );		# LOOP_DUB_STATE_CC      		  = 37  = 0x25;		# te_recv     looper_send        value is currently only the DUB state
define(28,	LOOP_COMMAND_CC,		36 );		# LOOP_COMMAND_CC        		  = 36  = 0x24;		# te_send     looper_recv        the value is the LOOP command
define(29,	TRACK_STATE_BASE_CC,	20 );		# TRACK_STATE_BASE_CC    		  = 20  = 0x14;		# te_recv     looper_send        for 0..3 tracks, value is track state
												# CLIP_VOL_BASE_CC       		  = 48  = 0x30;		# te_send     looper_recv        NOT_USED_YET - for 4 tracks * 3 clips - value is volume 0..127
												# CLIP_MUTE_BASE_CC      		  = 48  = 0x50;		# both    	  both        		 NOT_USED_YET - for 4 tracks * 3 clips - value is mute state
												# NOTIFY_LOOP            		  = 48  = 0x64;     # te_recv     looper_send        NOT_USED_YET - value=number of pending loop notifies

define(30, LOOPER_CONTROL_INPUT_GAIN,	0);		# LOOPER_CONTROL_INPUT_GAIN       = 0
define(31, LOOPER_CONTROL_THRU_VOLUME,	1);		# LOOPER_CONTROL_THRU_VOLUME      = 1
define(32, LOOPER_CONTROL_LOOP_VOLUME,	2);		# LOOPER_CONTROL_LOOP_VOLUME      = 2
define(33, LOOPER_CONTROL_MIX_VOLUME,	3);		# LOOPER_CONTROL_MIX_VOLUME       = 3
define(34, LOOPER_CONTROL_OUTPUT_GAIN,	4);		# LOOPER_CONTROL_OUTPUT_GAIN      = 4



#----------------------------------------
# Variable Slot Defines
#----------------------------------------
# Synth Variables

define(100, _bank,  0);				# BANK number (0..1)
define(101, _patch_button, 1);		# PATCH_BUTTON number (0..3, 5..8, 10..13)
define(102, _patch_number, 2);		# ACTUAL_PATCH number (0..23) sent to Synth

# Guitar Effect Variables

define(104, _dist_effect_on, 3);	# DIST_EFFECT_ON
define(105, _wah_effect_on,  4);	# WAH_EFFECT_ON
define(106, _chor_effect_on, 5);	# CHOR_EFFECT_ON
define(107, _echo_effect_on, 6);	# ECHO_EFFECT_ON

# Looper Variables

define(109, _dub_mode,		7);		# DUB_MODE
define(110, _stop_cmd,		8);		# STOP_BUTTON_COMMAND
define(111, _track1_state,	9);		# TRACK1 STATE
define(112, _track2_state,	10);	# TRACK2 STATE
define(113, _track3_state,	11);	# TRACK3 STATE
define(114, _track4_state,	12);	# TRACK4 STATE

#----------------------------
# String Definition
#----------------------------
# These strings are in the same order as the patches on SampleTank,
# starting at MULTI_OFFSET (which is one based, and 17 in the
# SampleTank UI).

define_string(0,	"BASS1" );		# SHORT_NAME[0]
define_string(1,	"BASS-F" );
define_string(2,	"BASS-G" );
define_string(3,	"SFLUTE" );
define_string(4,	"SPACE1" );
define_string(5,	"SPACE2" );
define_string(6,	"ORGAN1" );
define_string(7,	"ORGAN2" );
define_string(8,	"BRASS" );
define_string(9,	"PIANO1" );
define_string(10,	"PIANO2" );
define_string(11,	"SPACE3" );
define_string(12,	"BASS2" );
define_string(13,	"BASS2-G" );
define_string(14,	"EMPTY" );
define_string(15,	"FLUTE1" );
define_string(16,	"VOICE OH" );
define_string(17,	"VOICE AH" );
define_string(18,	"STRINGS1" );
define_string(19,	"STRING2" );
define_string(20,	"BANJO" );
define_string(21,	"CHIME" );
define_string(22,	"MARIMNA" );
define_string(23,	"FX" );

# and so on ...

define_string(24,	"MM Bass Finger" );	# PATCH_LONG_NAME{0}
define_string(25,	"MM Bass Finger" );
define_string(26,	"MM Bass Finger" );
define_string(27,	"Psych Flute" );
define_string(28,	"Whispering Pad" );
define_string(29,	"Mega Motion 3" );
define_string(30,	"Ballad B Pad" );
define_string(31,	"Drawbars Bow" );
define_string(32,	"Drama Brass" );
define_string(33,	"Mellow Grand 2" );
define_string(34,	"Classical Grand" );
define_string(35,	"Mega Motion 4" );
define_string(36,	"Chorus Fretless" );
define_string(37,	"Chorus Fretless" );
define_string(38,	"" );
define_string(39,	"Orch Flute" );
define_string(40,	"Vocal Oh" );
define_string(41,	"Vocal Ahh" );
define_string(42,	"Violin" );
define_string(43,	"String Orch2" );
define_string(44,	"Banjo" );
define_string(45,	"Vibes+Octave" );
define_string(46,	"Marimba" );
define_string(47,	"SFX Collection" );


#----------------------------------------
# Rig initialization section
#----------------------------------------

PEDAL(0, "Synth", 	MIDI0,	SYNTH_VOLUME_CHANNEL, 	SYNTH_VOLUME_CC);
PEDAL(1, "Loop",  	SERIAL,	0, LOOP_CONTROL_BASE_CC + LOOPER_CONTROL_LOOP_VOLUME);
PEDAL(2, "Wah",   	MIDI0,	GUITAR_EFFECTS_CHANNEL, GUITAR_WAH_CONTROL_CC);
PEDAL(3, "Guitar",	MIDI0,	GUITAR_VOLUME_CHANNEL, 	GUITAR_VOLUME_CC);

ROTARY(1, SERIAL,	0, LOOP_CONTROL_BASE_CC + LOOPER_CONTROL_INPUT_GAIN);
ROTARY(1, SERIAL,	0, LOOP_CONTROL_BASE_CC + LOOPER_CONTROL_OUTPUT_GAIN);
ROTARY(1, SERIAL,	0, LOOP_CONTROL_BASE_CC + LOOPER_CONTROL_THRU_VOLUME);
ROTARY(1, SERIAL,	0, LOOP_CONTROL_BASE_CC + LOOPER_CONTROL_MIX_VOLUME);


AREA(AREA_SHORT_NAME,	32,  BOLD, 	LEFT,	 5,   5, 299, 40);		# patch short name indented 5 from client area, 35 pixels high
AREA(AREA_LONG_NAME,	18,  BOLD,	LEFT,	 5,  43, 475, 68);		# patch lobng name 3 pixels below patch short name, 25 pixels high
AREA(AREA_MSG,  		32,  NORMAL,  RIGHT, 300, 5, 475, 40);		# General Purpose area in upper right

LISTEN(_dub_mode, SERIAL, 1, LOOP_DUB_STATE_CC);
	# Listen on the Serial Midi Port for
	# LOOP_DUB_STATE_CC=37 messages and stick
	# their values in the _dub_mode value

LISTEN(_stop_cmd, SERIAL, 1, LOOP_STOP_CMD_STATE_CC);
	# Listen on the Serial Midi Port for
	# LOOP_STOP_CMD_STATE_CC=38 messages and stick
	# their values in the _stop_cmd value

LISTEN(_track1_state, SERIAL, 1, TRACK_STATE_BASE_CC + 0);
LISTEN(_track2_state, SERIAL, 1, TRACK_STATE_BASE_CC + 1);
LISTEN(_track3_state, SERIAL, 1, TRACK_STATE_BASE_CC + 2);
LISTEN(_track4_state, SERIAL, 1, TRACK_STATE_BASE_CC + 3);
	# Listen on the Serial Midi Port for
	# TRACK_STATE_BASE_CC(20..23) messages
	# and stick their values into the appropriate
	# _track_state values





#=======================================================
# Buttons
#========================================================
# Synth Bank Button
#-----------------------
# If the _bank value is set, the LED is BLUE, otherwise its CYAN.
# A press of the button toggles the BANK value

BUTTON(4):
	color:
		VALUE[_bank] ? LED_BLUE : LED_CYAN;
    click:
		setValue(_bank, ! VALUE[_bank]);


#--------------------------------
# Synth Patch LEDs and Buttons
#--------------------------------
#
# IF the LED number matches the _patch_button value THEN
# 	IF the VALUE[_bank] is non-zero THEN
#       LED color = BLUE
#	ELSE
#		LED color = CYAN
# ELSE
#	LED color = BLACK
#
# If the BUTTON number matches the _patch_button value THEN
#   the _patch_button value is set to the BUTTON number
#   the _patch_number value is set to the correct (wonky) logical value
#   the _patch_number value plus the MULTI_OFFSET constant
#   	is sent via a ProgramChange message to the Midi Port,
#   	on the SYNTH_PROGRAM_CHANNEL
#   the short and long names are displayed

BUTTON(0):
	color:
		VALUE[_patch_button] == 0 ? VALUE[_patch_number] >= NUM_BANK_PATCHES ? LED_BLUE : LED_CYAN : LED_BLACK;
	press:
		setValue(_patch_button, 0);
		setValue(_patch_number, VALUE[_bank] * NUM_BANK_PATCHES + 2);
		SendPgmChg(MIDI0, SYNTH_PROGRAM_CHANNEL, MULTI_OFFSET + VALUE[_patch_number]);
		display(AREA_SHORT_NAME, CYAN,    STRING[FIRST_SHORT_NAME + VALUE[_patch_number]]);
		display(AREA_LONG_NAME,  MAGENTA, STRING[FIRST_LONG_NAME  + VALUE[_patch_number]]);

BUTTON(1):
	color:
		VALUE[_patch_button] == 1 ? VALUE[_patch_number] >= NUM_BANK_PATCHES ? LED_BLUE : LED_CYAN : LED_BLACK;
	press:
		setValue(_patch_button, 1);
		setValue(_patch_number, VALUE[_bank] * NUM_BANK_PATCHES + 5);
		SendPgmChg(MIDI0, SYNTH_PROGRAM_CHANNEL, MULTI_OFFSET + VALUE[_patch_number]);
		display(AREA_SHORT_NAME, CYAN,    STRING[FIRST_SHORT_NAME + VALUE[_patch_number]]);
		display(AREA_LONG_NAME,  MAGENTA, STRING[FIRST_LONG_NAME  + VALUE[_patch_number]]);

BUTTON(2):
	color:
		VALUE[_patch_button] == 2 ? VALUE[_patch_number] >= NUM_BANK_PATCHES ? LED_BLUE : LED_CYAN : LED_BLACK;
	press:
		setValue(_patch_button, 2);
		setValue(_patch_number, VALUE[_bank] * NUM_BANK_PATCHES + 8);
		SendPgmChg(MIDI0, SYNTH_PROGRAM_CHANNEL, MULTI_OFFSET + VALUE[_patch_number]);
		display(AREA_SHORT_NAME, CYAN,    STRING[FIRST_SHORT_NAME + VALUE[_patch_number]]);
		display(AREA_LONG_NAME,  MAGENTA, STRING[FIRST_LONG_NAME  + VALUE[_patch_number]]);

BUTTON(3):
	color:
		VALUE[_patch_button] == 3 ? VALUE[_patch_number] >= NUM_BANK_PATCHES ? LED_BLUE : LED_CYAN : LED_BLACK;
	press:
		setValue(_patch_button, 3);
		setValue(_patch_number, VALUE[_bank] * NUM_BANK_PATCHES + 11);
		SendPgmChg(MIDI0, SYNTH_PROGRAM_CHANNEL, MULTI_OFFSET + VALUE[_patch_number]);
		display(AREA_SHORT_NAME, CYAN,    STRING[FIRST_SHORT_NAME + VALUE[_patch_number]]);
		display(AREA_LONG_NAME,  MAGENTA, STRING[FIRST_LONG_NAME  + VALUE[_patch_number]]);


# Second Row

BUTTON(5):
	color:
		VALUE[_patch_button] == 5 ? VALUE[_patch_number] >= NUM_BANK_PATCHES ? LED_BLUE : LED_CYAN : LED_BLACK;
	press:
		setValue(_patch_button, 5);
		setValue(_patch_number, VALUE[_bank] * NUM_BANK_PATCHES + 1);
		SendPgmChg(MIDI0, SYNTH_PROGRAM_CHANNEL, MULTI_OFFSET + VALUE[_patch_number]);
		display(AREA_SHORT_NAME, CYAN,    STRING[FIRST_SHORT_NAME + VALUE[_patch_number]]);
		display(AREA_LONG_NAME,  MAGENTA, STRING[FIRST_LONG_NAME  + VALUE[_patch_number]]);

BUTTON(6):
	color:
		VALUE[_patch_button] == 6 ? VALUE[_patch_number] >= NUM_BANK_PATCHES ? LED_BLUE : LED_CYAN : LED_BLACK;
	press:
		setValue(_patch_button, 6);
		setValue(_patch_number, VALUE[_bank] * NUM_BANK_PATCHES + 4);
		SendPgmChg(MIDI0, SYNTH_PROGRAM_CHANNEL, MULTI_OFFSET + VALUE[_patch_number]);
		display(AREA_SHORT_NAME, CYAN,    STRING[FIRST_SHORT_NAME + VALUE[_patch_number]]);
		display(AREA_LONG_NAME,  MAGENTA, STRING[FIRST_LONG_NAME  + VALUE[_patch_number]]);

BUTTON(7):
	color:
		VALUE[_patch_button] == 7 ? VALUE[_patch_number] >= NUM_BANK_PATCHES ? LED_BLUE : LED_CYAN : LED_BLACK;
	press:
		setValue(_patch_button, 7);
		setValue(_patch_number, VALUE[_bank] * NUM_BANK_PATCHES + 7);
		SendPgmChg(MIDI0, SYNTH_PROGRAM_CHANNEL, MULTI_OFFSET + VALUE[_patch_number]);
		display(AREA_SHORT_NAME, CYAN,    STRING[FIRST_SHORT_NAME + VALUE[_patch_number]]);
		display(AREA_LONG_NAME,  MAGENTA, STRING[FIRST_LONG_NAME  + VALUE[_patch_number]]);

BUTTON(8):
	color:
		VALUE[_patch_button] == 8 ? VALUE[_patch_number] >= NUM_BANK_PATCHES ? LED_BLUE : LED_CYAN : LED_BLACK;
	press:
		setValue(_patch_button, 8);
		setValue(_patch_number, VALUE[_bank] * NUM_BANK_PATCHES + 10);
		SendPgmChg(MIDI0, SYNTH_PROGRAM_CHANNEL, MULTI_OFFSET + VALUE[_patch_number]);
		display(AREA_SHORT_NAME, CYAN,    STRING[FIRST_SHORT_NAME + VALUE[_patch_number]]);
		display(AREA_LONG_NAME,  MAGENTA, STRING[FIRST_LONG_NAME  + VALUE[_patch_number]]);


# Third Row

BUTTON(10):
	color:
		VALUE[_patch_button] == 10 ? VALUE[_patch_number] >= NUM_BANK_PATCHES ? LED_BLUE : LED_CYAN : LED_BLACK;
	press:
		setValue(_patch_button, 10);
		setValue(_patch_number, VALUE[_bank] * NUM_BANK_PATCHES + 0);
		SendPgmChg(MIDI0, SYNTH_PROGRAM_CHANNEL, MULTI_OFFSET + VALUE[_patch_number]);
		display(AREA_SHORT_NAME, CYAN,    STRING[FIRST_SHORT_NAME + VALUE[_patch_number]]);
		display(AREA_LONG_NAME,  MAGENTA, STRING[FIRST_LONG_NAME  + VALUE[_patch_number]]);

BUTTON(11):
	color:
		VALUE[_patch_button] == 11 ? VALUE[_patch_number] >= NUM_BANK_PATCHES ? LED_BLUE : LED_CYAN : LED_BLACK;
	press:
		setValue(_patch_button, 11);
		setValue(_patch_number, VALUE[_bank] * NUM_BANK_PATCHES + 3);
		SendPgmChg(MIDI0, SYNTH_PROGRAM_CHANNEL, MULTI_OFFSET + VALUE[_patch_number]);
		display(AREA_SHORT_NAME, CYAN,    STRING[FIRST_SHORT_NAME + VALUE[_patch_number]]);
		display(AREA_LONG_NAME,  MAGENTA, STRING[FIRST_LONG_NAME  + VALUE[_patch_number]]);

BUTTON(12):
	color:
		VALUE[_patch_button] == 12 ? VALUE[_patch_number] >= NUM_BANK_PATCHES ? LED_BLUE : LED_CYAN : LED_BLACK;
	press:
		setValue(_patch_button, 12);
		setValue(_patch_number, VALUE[_bank] * NUM_BANK_PATCHES + 6);
		SendPgmChg(MIDI0, SYNTH_PROGRAM_CHANNEL, MULTI_OFFSET + VALUE[_patch_number]);
		display(AREA_SHORT_NAME, CYAN,    STRING[FIRST_SHORT_NAME + VALUE[_patch_number]]);
		display(AREA_LONG_NAME,  MAGENTA, STRING[FIRST_LONG_NAME  + VALUE[_patch_number]]);

BUTTON(13):
	color:
		VALUE[_patch_button] == 13 ? VALUE[_patch_number] >= NUM_BANK_PATCHES ? LED_BLUE : LED_CYAN : LED_BLACK;
	press:
		setValue(_patch_button, 13);
		setValue(_patch_number, VALUE[_bank] * NUM_BANK_PATCHES + 9);
		SendPgmChg(MIDI0, SYNTH_PROGRAM_CHANNEL, MULTI_OFFSET + VALUE[_patch_number]);
		display(AREA_SHORT_NAME, CYAN,    STRING[FIRST_SHORT_NAME + VALUE[_patch_number]]);
		display(AREA_LONG_NAME,  MAGENTA, STRING[FIRST_LONG_NAME  + VALUE[_patch_number]]);


#----------------------------------
# Guitar Effect Buttons
#----------------------------------
# The LEDs are GREEN if the _effect_on value is set,
#   or BLACK if it is not
# A short click of the BUTTONS toggle the _effect_on value
#	between 0 and 127, and sends the value to
# 	the appropriate GUITAR_CC on on the Midi Port
#   and the GUITAR_EFFECTS_CHANNEL
# A long press of the 4th button clears them all.

BUTTON(15):											# DIST effect
	color:
		VALUE[_dist_effect_on] ? LED_GREEN : LED_BLACK;
	click:
		setValue(_dist_effect_on, VALUE[_dist_effect_on] ? 0 : 127);
		sendCC(MIDI0, GUITAR_EFFECTS_CHANNEL, GUITAR_DISTORTION_CC, VALUE[_dist_effect_on]);
		display(AREA_MSG, YELLOW, "DIST");

BUTTON(16):											# WAH effect
	color:
		VALUE[_wah_effect_on] ? LED_GREEN : LED_BLACK;
	click:
		setValue(_wah_effect_on, VALUE[_wah_effect_on] ? 0 : 127);
		sendCC(MIDI0, GUITAR_EFFECTS_CHANNEL, GUITAR_WAH_CC, VALUE[_wah_effect_on]);
		display(AREA_MSG, YELLOW, "WAH");

BUTTON(17):											# CHOR effect
	color:
		VALUE[_chor_effect_on] ? LED_GREEN : LED_BLACK;
	click:
		setValue(_chor_effect_on, VALUE[_chor_effect_on] ? 0 : 127);
		sendCC(MIDI0, GUITAR_EFFECTS_CHANNEL, GUITAR_CHOR_CC, VALUE[_chor_effect_on]);
		display(AREA_MSG, YELLOW, "CHOR");

BUTTON(18):											# ECHO effect
	color:
		VALUE[_echo_effect_on] ? LED_GREEN : LED_BLACK;
	click:
		setValue(_echo_effect_on, VALUE[_echo_effect_on] ? 0 : 127);
		sendCC(MIDI0, GUITAR_EFFECTS_CHANNEL, GUITAR_ECHO_CC, VALUE[_echo_effect_on]);
		display(AREA_MSG, YELLOW, "ECHO");
	long:
		setValue(_dist_effect_on, 0);
		setValue(_wah_effect_on,  0);
		setValue(_chor_effect_on, 0);
		setValue(_echo_effect_on, 0);
		sendCC(MIDI0, GUITAR_EFFECTS_CHANNEL, GUITAR_DISTORTION_CC,	0);						# Send all EFFECT OFF messages
		sendCC(MIDI0, GUITAR_EFFECTS_CHANNEL, GUITAR_WAH_CC,			0);
		sendCC(MIDI0, GUITAR_EFFECTS_CHANNEL, GUITAR_CHOR_CC,		0);
		sendCC(MIDI0, GUITAR_EFFECTS_CHANNEL, GUITAR_ECHO_CC,		0);
		display(AREA_MSG, YELLOW, "EFFECTS OFF");



#---------------------------------------
# Looper Stop Button
#----------------------------------------
# Note that the Looper LEDs are dependent on midi messages
# that are sent via Serial Midi FROM the rPi Looper, and
# which change named VALUES via the LISTEN statements above.
# The buttons merely send certain CCs and values to the rPi
# Looper over the Serial Midi Port.
#
# The Stop LED is
#	RED if the _stop_cmd value is LOOP_COMMAND_STOP_IMMEDIATE=2,
#   WHITE if the _stop_cmd_value is LOOP_COMMAND_STOP=3, and
#   BLACK otherwise.
# A click of the Stop Button sends a LOOP_COMMAND_CC
#   message to the Serial Midi Port on Channel 0
#   with the value of the _stop_cmd value.
# A long click of the Dub Button sends a LOOP_COMMAND_CC
#   message to the Serial Midi Port ON Channel 0
#   with the value of LOOP_COMMAND_CLEAR_ALL=1

BUTTON(19):
	color:
		VALUE[_stop_cmd] == 2 ? LED_RED :	 #  STOP_BUTTON_COMMAND == LOOP_COMMAND_STOP_IMMEDIATE ? LED_RED :
		VALUE[_stop_cmd] == 3 ? LED_WHITE :	 #  STOP_BUTTON_COMMAND == LOOP_COMMAND_STOP ? LED_WHITE :
		LED_BLACK;
	click:
		sendCC(SERIAL, 1, LOOP_COMMAND_CC, VALUE[_stop_cmd]);
		display(AREA_MSG, YELLOW, VALUE[_stop_cmd] == 2 ? "STOP!" : VALUE[_stop_cmd] == 3 ? "STOP" : "");
	long:
		sendCC(SERIAL, 1, LOOP_COMMAND_CC, LOOP_COMMAND_CLEAR_ALL);
		display(AREA_MSG, YELLOW, "LOOP CLEAR");
		# even though we will get these back, clear them for testing
		setValue(_stop_cmd, 0);
		setValue(_track1_state,0);
		setValue(_track2_state,0);
		setValue(_track3_state,0);
		setValue(_track4_state,0);



#------------------------------------------
# Looper Track Buttons
#------------------------------------------
# The looper track LEDs are set based on the
# 	_track_state values.
#   They LEDS are set to:
#		RED if RECORDING or PENDING_RECORD (9)
#   	YELLOW if PLAYING or PENDING_PLAY (18)
#       GREEN if STOPPED or PENDING_STOP (36)
#       and BLACK if empty (otherwise)
#   They are set to BLINK if they are pending (56)
# A press of a Track Button sends a LOOP_COMMAND_CC
#   message to the Serial Midi Port on Channel 0
#   with the value of the LOOP_COMMAND_TRACK_BASE plus
#   the track number (0..3)

BUTTON(20):				# track1 button
	color:
		VALUE[_track1_state] & 9  ? LED_RED :
		VALUE[_track1_state] & 18 ? LED_YELLOW :
		VALUE[_track1_state] & 36 ? LED_GREEN :
		LED_BLACK;
#	blink:
#		VALUE[_track1_state] & 56;
	press:
		sendCC(SERIAL, 1, LOOP_COMMAND_CC, LOOP_COMMAND_TRACK_BASE + 0);
		display(AREA_MSG, YELLOW, "TRACK1");

BUTTON(21):
	color:
		VALUE[_track2_state] & 9  ? LED_RED :
		VALUE[_track2_state] & 18 ? LED_YELLOW :
		VALUE[_track2_state] & 36 ? LED_GREEN :
		LED_BLACK;
#	blink:
#		VALUE[_track2_state] & 56;
	press:
		sendCC(SERIAL, 1, LOOP_COMMAND_CC, LOOP_COMMAND_TRACK_BASE + 1);
		display(AREA_MSG, YELLOW, "TRACK2");

BUTTON(22):
	color:
		VALUE[_track3_state] & 9  ? LED_RED :
		VALUE[_track3_state] & 18 ? LED_YELLOW :
		VALUE[_track3_state] & 36 ? LED_GREEN :
		LED_BLACK;
#	blink:
#		VALUE[_track3_state] & 56;
	press:
		sendCC(SERIAL, 1, LOOP_COMMAND_CC, LOOP_COMMAND_TRACK_BASE + 2);
		display(AREA_MSG, YELLOW, "TRACK3");

BUTTON(23):
	color:
		VALUE[_track4_state] & 9  ? LED_RED :
		VALUE[_track4_state] & 18 ? LED_YELLOW :
		VALUE[_track4_state] & 36 ? LED_GREEN :
		LED_BLACK;
#	blink:
#		VALUE[_track4_state] & 56;
	press:
		sendCC(SERIAL, 1, LOOP_COMMAND_CC, LOOP_COMMAND_TRACK_BASE + 3);
		display(AREA_MSG, YELLOW, "TRACK4");


#---------------------------------------
# Looper Dub
#----------------------------------------
# The Dub LED is ORANGE if _dub_mode value if set,
# 	or black otherwise.
# A click of the Dub Button sends a LOOP_COMMAND_CC
#   message to the Serial Midi Port on Channel 0,
#   with the value of LOOP_COMMAND_DUB_MODE=4
# A long click of the Dub Button sends a LOOP_COMMAND_CC
#   message to the Serial Midi Port with the value
#   of LOOP_COMMAND_CLEAR_ALL=1

BUTTON(24):
	color:
		VALUE[_dub_mode] ? LED_ORANGE : LED_WHITE;
	click:
		sendCC(SERIAL, 0, LOOP_COMMAND_CC, LOOP_COMMAND_DUB);
		display(AREA_MSG, YELLOW, VALUE[_dub_mode] ? "DUB OFF" : "DUB ON");
	long:
		sendCC(SERIAL, 0, LOOP_COMMAND_CC, LOOP_COMMAND_CLEAR_ALL);
		display(AREA_MSG, YELLOW, "LOOP CLEAR");
		# even though we will get these back, clear them for testing
		setValue(_stop_cmd, 0);
		setValue(_track1_state,0);
		setValue(_track2_state,0);
		setValue(_track3_state,0);
		setValue(_track4_state,0);

# end of test.rig
